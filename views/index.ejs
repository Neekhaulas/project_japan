<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="refresh" content="60">
    <title><% if (notifications && notifications.length > 0) { %>(<%= notifications.length %>) <% } %>Flight Price Tracker</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="/css/style.css">
    <script>
        // Update favicon with notification count
        function updateFavicon(count) {
            const canvas = document.createElement('canvas');
            canvas.width = 32;
            canvas.height = 32;
            const ctx = canvas.getContext('2d');

            // Draw background circle
            ctx.beginPath();
            ctx.arc(16, 16, 16, 0, 2 * Math.PI);
            ctx.fillStyle = count > 0 ? '#EF4444' : '#6B7280'; // Red if notifications, gray if none
            ctx.fill();

            if (count > 0) {
                // Draw number
                ctx.fillStyle = 'white';
                ctx.font = 'bold 20px Arial';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                // If count is more than 99, show 99+
                const text = count > 99 ? '99+' : count.toString();
                ctx.fillText(text, 16, 16);
            }

            // Update favicon
            const link = document.querySelector("link[rel*='icon']") || document.createElement('link');
            link.type = 'image/x-icon';
            link.rel = 'shortcut icon';
            link.href = canvas.toDataURL();
            document.getElementsByTagName('head')[0].appendChild(link);
        }

        // Update page title when notifications change
        function updatePageTitle(count) {
            document.title = count > 0 ? `(${count}) Flight Price Tracker` : 'Flight Price Tracker';
            updateFavicon(count);
        }

        // Request notification permission
        if ('Notification' in window) {
            Notification.requestPermission();
        }

        // Show browser notification if permission is granted
        function showBrowserNotification(title, message) {
            if ('Notification' in window && Notification.permission === 'granted') {
                new Notification(title, {
                    body: message,
                    icon: '/favicon.ico'
                });
            }
        }

        // Trigger notifications on page load
        document.addEventListener('DOMContentLoaded', () => {
            <% if (notifications && notifications.length > 0) { %>
                showBrowserNotification(
                    'Flight Price Alerts',
                    'You have <%= notifications.length %> new price alert<%= notifications.length > 1 ? "s" : "" %>!'
                );
            <% } %>
            // Initialize favicon
            updateFavicon(<%= notifications ? notifications.length : 0 %>);
        });

        // Auto refresh the page every minute
        setTimeout(function() {
            window.location.reload();
        }, 60000);
    </script>
    <style>
        .cheapest-route {
            border: 3px solid #10B981;
            position: relative;
        }
        .cheapest-route::before {
            content: "Best Deal";
            position: absolute;
            top: -12px;
            right: 10px;
            background: #10B981;
            color: white;
            padding: 2px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: bold;
        }
        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #EF4444;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
        }
        .notification-panel {
            display: none;
            position: absolute;
            top: 100%;
            right: 0;
            width: 400px;
            max-height: 500px;
            overflow-y: auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            z-index: 50;
        }
        .notification-panel.show {
            display: block;
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="container mx-auto px-4 py-12">
        <header class="text-center mb-12 relative">
            <div class="flex justify-between items-center mb-4">
                <h1 class="text-5xl font-bold text-gray-900">Flight Price Tracker</h1>
                <div class="relative">
                    <button id="notificationBell" class="p-2 rounded-full hover:bg-gray-100 focus:outline-none">
                        <svg class="w-8 h-8 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                        </svg>
                        <% if (notifications && notifications.length > 0) { %>
                            <span class="notification-badge"><%= notifications.length %></span>
                        <% } %>
                    </button>
                    <div id="notificationPanel" class="notification-panel">
                        <div class="p-4 border-b flex justify-between items-center">
                            <h3 class="text-lg font-semibold text-gray-900">Notifications</h3>
                            <% if (notifications && notifications.length > 0) { %>
                                <button onclick="clearAllNotifications()" class="text-sm text-red-600 hover:text-red-800 font-medium">
                                    Clear All
                                </button>
                            <% } %>
                        </div>
                        <div class="divide-y">
                            <% if (notifications && notifications.length > 0) { %>
                                <% notifications.forEach(notification => { %>
                                    <div class="p-4 hover:bg-gray-50" data-notification-id="<%= notification.id %>">
                                        <div class="flex justify-between items-start">
                                            <div>
                                                <p class="text-sm text-gray-900"><%= notification.message %></p>
                                                <p class="text-xs text-gray-500 mt-1"><%= new Date(notification.timestamp).toLocaleString() %></p>
                                            </div>
                                            <button class="text-gray-400 hover:text-gray-600" onclick="markAsRead(<%= notification.id %>)">
                                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                                </svg>
                                            </button>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="p-4 text-center text-gray-500">
                                    No new notifications
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
            <p class="text-lg text-gray-600">Track and compare flight prices across different dates</p>
        </header>
        
        <div class="grid grid-cols-1 gap-8">
            <% Object.entries(priceData).forEach(([destinationCity, routes]) => { %>
                <div class="bg-white rounded-xl shadow-lg overflow-hidden">
                    <details class="group [&>summary::-webkit-details-marker]:hidden">
                        <summary class="p-6 cursor-pointer list-none">
                            <div class="flex items-center justify-between">
                                <h2 class="text-3xl font-bold text-gray-800 flex items-center">
                                    <span class="bg-blue-100 text-blue-800 px-4 py-2 rounded-full text-lg mr-3">
                                        <%= destinationCity.charAt(0).toUpperCase() + destinationCity.slice(1) %>
                                    </span>
                                </h2>
                                <div class="flex items-center">
                                    <span class="text-lg font-semibold text-gray-600 mr-2">Lowest Price:</span>
                                    <span class="text-2xl font-bold text-green-600">
                                        <% 
                                        const prices = Object.values(routes).map(route => 
                                            route && route.history && route.history.length > 0 ? route.history[route.history.length - 1].price : null
                                        ).filter(price => price !== null);
                                        if (prices.length > 0) {
                                            const lowestPrice = Math.min(...prices);
                                            if (lowestPrice !== Infinity) {
                                                %><%= lowestPrice %>€<%
                                            } else {
                                                %>No data available<%
                                            }
                                        } else {
                                            %>No data available<%
                                        }
                                        %>
                                    </span>
                                    <svg class="w-6 h-6 ml-2 transform group-open:rotate-180 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                                    </svg>
                                </div>
                            </div>
                        </summary>
                        <div class="p-6 pt-0">
                            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                                <% 
                                // Find the cheapest route and sort routes by current price
                                let cheapestRoute = null;
                                let lowestPrice = Infinity;
                                
                                // Convert routes to array and sort by current price
                                const sortedRoutes = Object.entries(routes).sort(([routeIdA, dataA], [routeIdB, dataB]) => {
                                    const currentPriceA = dataA && dataA.history && dataA.history.length > 0 ? dataA.history[dataA.history.length - 1].price : Infinity;  // Most recent price
                                    const currentPriceB = dataB && dataB.history && dataB.history.length > 0 ? dataB.history[dataB.history.length - 1].price : Infinity;  // Most recent price
                                    
                                    // Update cheapest route while sorting
                                    if (currentPriceA < lowestPrice) {
                                        lowestPrice = currentPriceA;
                                        cheapestRoute = routeIdA;
                                    }
                                    if (currentPriceB < lowestPrice) {
                                        lowestPrice = currentPriceB;
                                        cheapestRoute = routeIdB;
                                    }
                                    
                                    return currentPriceA - currentPriceB;
                                });
                                %>
                                <% sortedRoutes.forEach(([routeId, data]) => { %>
                                    <div class="bg-gray-50 rounded-lg p-4 <%= routeId === cheapestRoute ? 'cheapest-route' : '' %>">
                                        <h3 class="text-lg font-semibold text-gray-700 mb-3">
                                            <%= routeId.split('-')[0].charAt(0).toUpperCase() + routeId.split('-')[0].slice(1) %> → <%= destinationCity.charAt(0).toUpperCase() + destinationCity.slice(1) %>
                                            <br>
                                            <span class="text-sm text-gray-500">
                                                <%= routeId.split('-').slice(2, 5).join(' / ') %> → <%= routeId.split('-').slice(5).join(' / ') %>
                                            </span>
                                        </h3>
                                        <% 
                                        const prices = Array.isArray(data.history) ? data.history.map(d => d.price) : [];
                                        const lowestPrice = prices.length > 0 ? Math.min(...prices) : null;
                                        const highestPrice = prices.length > 0 ? Math.max(...prices) : null;
                                        %>
                                        <% if (lowestPrice !== null && highestPrice !== null) { %>
                                            <div class="mb-2 text-sm font-medium">
                                                <span class="text-green-600">Lowest Price Recorded: <%= lowestPrice %>€</span>
                                                <span class="mx-2 text-gray-400">•</span>
                                                <span class="text-red-600">Highest Price Recorded: <%= highestPrice %>€</span>
                                            </div>
                                        <% } %>
                                        <div class="h-48 mb-4">
                                            <canvas id="chart-<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %>"></canvas>
                                        </div>
                                        <div class="space-y-2">
                                            <% if (Array.isArray(data.history) && data.history.length > 0) { %>
                                                <div class="flex justify-between items-center bg-white p-2 rounded shadow-sm">
                                                    <span class="text-sm text-gray-600">Current Price</span>
                                                    <span class="font-bold text-gray-900"><%= data.history[data.history.length - 1].price %>€</span>
                                                </div>
                                            <% } %>
                                            <button 
                                                onclick="recheckFlight('<%= routeId %>')"
                                                class="w-full mt-2 bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded transition-colors duration-200 flex items-center justify-center"
                                            >
                                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                                </svg>
                                                Recheck Price
                                            </button>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        </div>
                    </details>
                </div>
            <% }); %>
        </div>
    </div>

    <script>
        // Chart.js global defaults
        Chart.defaults.font.family = "'Inter', sans-serif";
        Chart.defaults.plugins.tooltip.backgroundColor = 'rgba(0, 0, 0, 0.8)';
        Chart.defaults.plugins.tooltip.padding = 12;
        Chart.defaults.plugins.tooltip.cornerRadius = 4;
        Chart.defaults.animation.duration = 1000;

        // Initialize charts for each route
        <% Object.entries(priceData).forEach(([destinationCity, routes]) => { %>
            <% Object.entries(routes).forEach(([routeId, data]) => { %>
                const ctx<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %> = document.getElementById('chart-<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %>').getContext('2d');
                
                // Calculate price trend
                const prices<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %> = <%- JSON.stringify(Array.isArray(data.history) ? data.history.map(d => d.price) : []) %>;
                const trend<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %> = prices<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %>.length > 0 ? 
                    prices<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %>[prices<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %>.length - 1] - prices<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %>[0] : 0;
                
                // Define color scheme
                const colors<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %> = {
                    primary: 'rgb(59, 130, 246)', // Blue
                    secondary: 'rgb(99, 102, 241)', // Indigo
                    success: 'rgb(34, 197, 94)', // Green
                    danger: 'rgb(239, 68, 68)', // Red
                    gradient: {
                        start: 'rgba(59, 130, 246, 0.2)',
                        end: 'rgba(99, 102, 241, 0.1)'
                    }
                };
                
                new Chart(ctx<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %>, {
                    type: 'line',
                    data: {
                        labels: <%- JSON.stringify(Array.isArray(data.history) ? data.history.map(d => d.timestamp) : []) %>,
                        datasets: [{
                            label: 'Price (€)',
                            data: prices<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %>,
                            borderColor: colors<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %>.primary,
                            backgroundColor: function(context) {
                                const chart = context.chart;
                                const {ctx, chartArea} = chart;
                                if (!chartArea) {
                                    return null;
                                }
                                const gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);
                                gradient.addColorStop(0, colors<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %>.gradient.start);
                                gradient.addColorStop(1, colors<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %>.gradient.end);
                                return gradient;
                            },
                            borderWidth: 2,
                            tension: 0.4,
                            fill: true,
                            pointRadius: 4,
                            pointHoverRadius: 6,
                            pointBackgroundColor: colors<%= routeId.replace(/[^a-zA-Z0-9]/g, '') %>.primary,
                            pointBorderColor: '#fff',
                            pointBorderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        interaction: {
                            intersect: false,
                            mode: 'index'
                        },
                        scales: {
                            y: {
                                beginAtZero: false,
                                grid: {
                                    color: 'rgba(0, 0, 0, 0.05)',
                                    drawBorder: false
                                }
                            },
                            x: {
                                grid: {
                                    display: false
                                },
                                ticks: {
                                    maxRotation: 45,
                                    minRotation: 45
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                padding: 12,
                                cornerRadius: 4,
                                callbacks: {
                                    label: function(context) {
                                        return `Price: ${context.parsed.y}€`;
                                    }
                                }
                            }
                        }
                    }
                });
            <% }); %>
        <% }); %>

        // Notification panel toggle
        const notificationBell = document.getElementById('notificationBell');
        const notificationPanel = document.getElementById('notificationPanel');

        notificationBell.addEventListener('click', () => {
            notificationPanel.classList.toggle('show');
        });

        // Close notification panel when clicking outside
        document.addEventListener('click', (e) => {
            if (!notificationBell.contains(e.target) && !notificationPanel.contains(e.target)) {
                notificationPanel.classList.remove('show');
            }
        });

        // Clear all notifications
        async function clearAllNotifications() {
            try {
                const response = await fetch('/api/notifications/clear-all', {
                    method: 'POST'
                });
                if (response.ok) {
                    // Remove all notifications from the panel
                    const notificationPanel = document.getElementById('notificationPanel');
                    const notificationsContainer = notificationPanel.querySelector('.divide-y');
                    notificationsContainer.innerHTML = `
                        <div class="p-4 text-center text-gray-500">
                            No new notifications
                        </div>
                    `;
                    
                    // Remove notification badge
                    const badge = document.querySelector('.notification-badge');
                    if (badge) {
                        badge.remove();
                    }

                    // Update page title
                    updatePageTitle(0);
                }
            } catch (error) {
                console.error('Error clearing all notifications:', error);
            }
        }

        // Mark notification as read
        async function markAsRead(notificationId) {
            try {
                const response = await fetch(`/api/notifications/${notificationId}/read`, {
                    method: 'POST'
                });
                if (response.ok) {
                    const notification = document.querySelector(`[data-notification-id="${notificationId}"]`);
                    if (notification) {
                        notification.remove();
                    }
                    // Update notification badge
                    const badge = document.querySelector('.notification-badge');
                    if (badge) {
                        const count = parseInt(badge.textContent) - 1;
                        if (count > 0) {
                            badge.textContent = count;
                        } else {
                            badge.remove();
                        }
                        // Update page title
                        updatePageTitle(count);
                    }
                }
            } catch (error) {
                console.error('Error marking notification as read:', error);
            }
        }

        // Function to handle flight recheck
        async function recheckFlight(routeId) {
            try {
                const button = event.target.closest('button');
                const originalText = button.innerHTML;
                
                // Disable button and show loading state
                button.disabled = true;
                button.innerHTML = `
                    <svg class="animate-spin h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Checking...
                `;

                const response = await fetch(`/api/recheck/${routeId}`, {
                    method: 'POST'
                });

                if (!response.ok) {
                    throw new Error('Failed to recheck flight');
                }

                // Show success message
                button.innerHTML = `
                    <svg class="w-5 h-5 mr-2 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    Checked
                `;

                // Reload the page after a short delay to show updated data
                setTimeout(() => {
                    window.location.reload();
                }, 2000);

            } catch (error) {
                console.error('Error rechecking flight:', error);
                button.innerHTML = `
                    <svg class="w-5 h-5 mr-2 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                    Failed
                `;
                
                // Reset button after 2 seconds
                setTimeout(() => {
                    button.disabled = false;
                    button.innerHTML = originalText;
                }, 2000);
            }
        }
    </script>
</body>
</html> 